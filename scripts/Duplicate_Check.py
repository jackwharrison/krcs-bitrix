import requests
from config_loader import config
import io
import sys

# Ensure console prints in UTF-8 (especially for Windows)
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')

# Language setup
lang_arg = sys.argv[1] if len(sys.argv) > 1 else None
LANG = lang_arg or config.get("LANGUAGE", "en")

TRANSLATIONS = {
    "ky": {
        "üîç Starting duplicate check...\n": "üîç –î—É–±–ª–∏–∫–∞—Ç—Ç–∞—Ä–¥—ã —Ç–µ–∫—à–µ—Ä“Ø“Ø –±–∞—à—Ç–∞–ª–¥—ã...\n",
        "üì¶ {n} total beneficiaries loaded.": "üì¶ –ñ–∞–ª–ø—ã {n} –∂–∞—Ä–∞–Ω –∂“Ø–∫—Ç”©–ª–¥“Ø.",
        "üéØ {n} items eligible for duplicate checking.\n": "üéØ {n} –∂–∞—Ä–∞–Ω –¥—É–±–ª–∏–∫–∞—Ç —Ç–µ–∫—à–µ—Ä“Ø“Ø—Å“Ø–Ω”© —ã–ª–∞–π—ã–∫—Ç—É—É.\n",
        "üîÑ Checking item {i}/{total} (ID: {id})": "üîÑ –¢–µ–∫—à–µ—Ä–∏–ª–∏–ø –∂–∞—Ç–∞—Ç {i}/{total} (ID: {id})",
        "‚úÖ Updated {id} - {payload}": "‚úÖ –ñ–∞“£—ã—Ä—Ç—ã–ª–¥—ã {id} - {payload}",
        "‚ùå Failed to update {id}: {msg}": "‚ùå –ñ–∞“£—ã—Ä—Ç—É—É –∏—à–∫–µ –∞—à–∫–∞–Ω –∂–æ–∫ {id}: {msg}",
        "\n‚úÖ Duplicate check complete. All matching records updated.\n": "\n‚úÖ –¢–µ–∫—à–µ—Ä“Ø“Ø –∞—è–∫—Ç–∞–¥—ã. –ë–∞—Ä–¥—ã–∫ –¥–∞–ª –∫–µ–ª–≥–µ–Ω –∂–∞–∑—É—É–ª–∞—Ä –∂–∞“£—ã—Ä—Ç—ã–ª–¥—ã.\n"
    },
    "ru": {
        "üîç Starting duplicate check...\n": "üîç –ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã...\n",
        "üì¶ {n} total beneficiaries loaded.": "üì¶ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {n} –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–æ–≤.",
        "üéØ {n} items eligible for duplicate checking.\n": "üéØ {n} –∑–∞–ø–∏—Å–µ–π –ø–æ–¥–ª–µ–∂–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã.\n",
        "üîÑ Checking item {i}/{total} (ID: {id})": "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è {i}/{total} (ID: {id})",
        "‚úÖ Updated {id} - {payload}": "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {id} - {payload}",
        "‚ùå Failed to update {id}: {msg}": "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {id}: {msg}",
        "\n‚úÖ Duplicate check complete. All matching records updated.\n": "\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.\n"
    }
}

def t(key, **kwargs):
    """Simple translation function."""
    return TRANSLATIONS.get(LANG, {}).get(key, key).format(**kwargs)


def fetch_all_beneficiaries():
    all_items = []
    start = 0

    while True:
        response = requests.get(
            f"{config['B24_WEBHOOK_URL']}/crm.item.list",
            params={
                "entityTypeId": config['BENEFICIARY_ENTITY_TYPE_ID'],
                "start": start
            }
        ).json()

        items = response.get("result", {}).get("items", [])
        all_items.extend(items)

        if "next" not in response.get("result", {}):
            break

        start = response["result"]["next"]

    return all_items


def update_beneficiary(item_id, payload):
    res = requests.post(
        f"{config['B24_WEBHOOK_URL']}/crm.item.update",
        params={
            "entityTypeId": config['BENEFICIARY_ENTITY_TYPE_ID'],
            "id": item_id,
        },
        json={"fields": payload}
    )

    if res.ok:
        print(t("‚úÖ Updated {id} - {payload}", id=item_id, payload=payload))
    else:
        print(t("‚ùå Failed to update {id}: {msg}", id=item_id, msg=res.text))


def is_duplicate(item, all_items):
    national_id = item.get(config['DUPLICATE_CHECK_NATIONAL_ID_FIELD'])
    name = item.get(config['DUPLICATE_CHECK_NAME_FIELD'])
    reasons = []

    for other in all_items:
        if other["id"] == item["id"]:
            continue
        if other.get("stageId") != config['REGISTRATION_STAGE_ID']:
            continue

        if national_id and national_id == other.get(config['DUPLICATE_CHECK_NATIONAL_ID_FIELD']):
            reasons.append("Duplicate National ID")

        other_name = str(other.get(config['DUPLICATE_CHECK_NAME_FIELD'], "")).strip().lower()
        if name and name.strip().lower() == other_name:
            reasons.append("Duplicate Name")

    return ", ".join(set(reasons)) if reasons else None


def main():
    print(t("üîç Starting duplicate check...\n"))
    all_items = fetch_all_beneficiaries()
    candidates = [
        item for item in all_items
        if item.get("stageId") == config['REGISTRATION_STAGE_ID'] and not item.get(config['DUPLICATE_FLAG_FIELD'])
    ]

    print(t("üì¶ {n} total beneficiaries loaded.", n=len(all_items)))
    print(t("üéØ {n} items eligible for duplicate checking.\n", n=len(candidates)))

    for i, item in enumerate(candidates, 1):
        print(t("üîÑ Checking item {i}/{total} (ID: {id})", i=i, total=len(candidates), id=item['id']))
        reason = is_duplicate(item, all_items)
        payload = {
            config['DUPLICATE_FLAG_FIELD']: (
                config['DUPLICATE_FLAG_ENUM']["duplicate"] if reason else config['DUPLICATE_FLAG_ENUM']["unique"]
            ),
            config['DUPLICATE_REASON_FIELD']: reason or ""
        }
        update_beneficiary(item["id"], payload)

    print(t("\n‚úÖ Duplicate check complete. All matching records updated.\n"))


if __name__ == "__main__":
    main()
