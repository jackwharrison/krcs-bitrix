from flask import Flask, render_template, request, redirect, url_for, flash, send_file
import subprocess
import os
import json
from config_loader import load_config, save_config
import pandas as pd
import requests
from openpyxl import Workbook
import io
import math
from werkzeug.utils import secure_filename
from assign_beneficiaries import assign_beneficiaries_from_excel





app = Flask(__name__)
app.secret_key = "super-secret-key"

# Translation dictionary
translations = {
    'ky': {
        "System Configuration": "–°–∏—Å—Ç–µ–º–∞–Ω—ã –∂”©–Ω–¥”©”©",
        "Run": "–ò—à–∫–µ –∫–∏—Ä–≥–∏–∑“Ø“Ø",
        "Result": "–ù–∞—Ç—ã–π–∂–∞",
        "Check for duplicated households": "“Æ–π-–±“Ø–ª”©–ª”©—Ä–¥“Ø –∫–∞–π—Ç–∞–ª–∞–Ω—É—É “Ø—á“Ø–Ω —Ç–µ–∫—à–µ—Ä“Ø“Ø",
        "Check Eligibility": "–¢–∞—Ç—ã–∫—Ç—É—É–ª—É–∫—Ç—É —Ç–µ–∫—à–µ—Ä“Ø“Ø",
        "Remove Payment Duplicates": "–¢”©–ª”©–º –∫–∞–π—Ç–∞–ª–∞–Ω—É—É–ª–∞—Ä—ã–Ω –∞–ª—ã–ø —Å–∞–ª—É—É",
        "Check Duplicate IDs": "ID –∫–∞–π—Ç–∞–ª–∞–Ω—É—É—Å—É–Ω —Ç–µ–∫—à–µ—Ä“Ø“Ø",
        "Reset Beneficiaries": "–ë–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–ª–∞—Ä–¥—ã –±–∞—à—Ç–∞–ø–∫—ã –∞–±–∞–ª–≥–∞ –∫–µ–ª—Ç–∏—Ä“Ø“Ø",
        "System Configuration": "–°–∏—Å—Ç–µ–º–∞–Ω—ã–Ω –∂”©–Ω–¥”©”©–ª”©—Ä“Ø",
        "121 API URL": "121 API –¥–∞—Ä–µ–≥–∏",
        "121 API Username": "121 API –∫–æ–ª–¥–æ–Ω—É—É—á—É –∞—Ç—ã",
        "121 API Password": "121 API —Å—ã—Ä—Å”©–∑“Ø",
        "Matching fields": "–¢–µ“£ –∫–µ–ª–≥–µ–Ω —Ç–∞–ª–∞–∞–ª–∞—Ä",
        "Beneficiary field": "–ë–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–¥—ã–Ω —Ç–∞–ª–∞–∞—Å—ã",
        "Project field": "–î–æ–ª–±–æ–æ—Ä —Ç–∞–ª–∞–∞—Å—ã",
        "Duplicate enum values": "–î—É–±–ª–∏–∫–∞—Ç —ç–Ω—É–º –º–∞–∞–Ω–∏–ª–µ—Ä–∏",
        "Unique": "”®–∑–≥”©—Ä“Ø–ª–º”©",
        "Duplicate": "–ö–∞–π—Ç–∞–ª–∞–Ω–≥–∞–Ω",
        "Save Configuration": "–ñ”©–Ω–¥”©”©–ª”©—Ä–¥“Ø —Å–∞–∫—Ç–æ–æ",
        "B24 Settings": "B24 Settings",
        'fetching_children': 'üë∂ –ë–∞—Ä–¥—ã–∫ –±–∞–ª–¥–∞—Ä–¥—ã –∂“Ø–∫—Ç”©”©...',
        'found_beneficiaries_with_children': 'üë• {count} –±–∞–ª–∞ –±–∞—Ä –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä —Ç–∞–±—ã–ª–¥—ã.',
        'detecting_duplicates': 'üîç –ë–∞–ª–∞–Ω—ã–Ω –∞—Ç—ã –∂–∞–Ω–∞ —Ç—É—É–ª–≥–∞–Ω –¥–∞—Ç–∞—Å—ã –±–æ—é–Ω—á–∞ –¥—É–±–ª–∏–∫–∞—Ç—Ç–∞—Ä–¥—ã —Ç–∞–±—É—É...',
        'found_duplicates': '‚ö†Ô∏è {count} –º“Ø–º–∫“Ø–Ω –±–æ–ª–≥–æ–Ω –¥—É–±–ª–∏–∫–∞—Ç—Ç–∞—Ä —Ç–∞–±—ã–ª–¥—ã.',
        'fetching_beneficiaries': 'üì¶ –ë–∞—Ä–¥—ã–∫ –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–ª–∞—Ä–¥—ã –∂“Ø–∫—Ç”©”©...',
        'duplicate_household': '‚ö†Ô∏è –î—É–±–ª–∏–∫–∞—Ç “Ø–π-–±“Ø–ª”©: {name} ‚Üí –¥–∞–ª –∫–µ–ª–µ—Ç: {match_name}',
        "Starting payment deduplication...": "–¢”©–ª”©–º–¥”©—Ä–¥“Ø –∫–∞–π—Ç–∞–ª–æ–æ–¥–æ–Ω —Ç–∞–∑–∞–ª–æ–æ –±–∞—à—Ç–∞–ª–¥—ã...",
        "Deleted duplicate payment ID": "–ö–∞–π—Ç–∞–ª–∞–ø –∫–∏—Ä–≥–∏–∑–∏–ª–≥–µ–Ω —Ç”©–ª”©–º ”©—á“Ø—Ä“Ø–ª–¥“Ø. ID",
        "Failed to delete payment ID": "–¢”©–ª”©–º–¥“Ø ”©—á“Ø—Ä“Ø“Ø –∏—à–∫–µ –∞—à–∫–∞–Ω –∂–æ–∫. ID",
        "Done. Deleted {count} duplicates: {ids}": "–ê—è–∫—Ç–∞–ª–¥—ã. {count} –∫–∞–π—Ç–∞–ª–æ–æ ”©—á“Ø—Ä“Ø–ª–¥“Ø: {ids}",
        "Developed by 510 @ Netherlands Red Cross. Maintained by Kyrgyzstan Red Crescent": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ 510 –ø—Ä–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–æ–º –ö—Ä–∞—Å–Ω–æ–º –ö—Ä–µ—Å—Ç–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ö—Ä–∞—Å–Ω—ã–º –ü–æ–ª—É–º–µ—Å—è—Ü–µ–º –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞.",
        "For any support, contact sh.abdiseitov@redcrescent.kg": "–ö”©–º”©–∫ –∫–µ—Ä–µ–∫ –±–æ–ª—Å–æ, sh.abdiseitov@redcrescent.kg –¥–∞—Ä–µ–≥–∏–Ω–µ –∫–∞–π—Ä—ã–ª—ã“£—ã–∑.",
        "Go to System Configuration": "–°–∏—Å—Ç–µ–º–∞–Ω—ã–Ω –∂”©–Ω–¥”©”©–ª”©—Ä“Ø–Ω”© ”©—Ç“Ø“Ø",
        "Run Scripts": "–°–∫—Ä–∏–ø—Ç—Ç–µ—Ä–¥–∏ –∏—à—Ç–µ—Ç“Ø“Ø",
        "Import from Excel": "Excel —Ñ–∞–π–ª—ã–Ω–∞–Ω –∏–º–ø–æ—Ä—Ç—Ç–æ–æ",
        "Step 1: Download Template": "1-–∫–∞–¥–∞–º: –®–∞–±–ª–æ–Ω–¥—É –∂“Ø–∫—Ç”©–ø –∞–ª—É—É",
        "Step 2: Import Excel File": "2-–∫–∞–¥–∞–º: Excel —Ñ–∞–π–ª–¥—ã –∏–º–ø–æ—Ä—Ç—Ç–æ–æ",        
        "Step 3: Assign Beneficiaries to Project from Government List": "3-–∫–∞–¥–∞–º: –ë–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–ª–∞—Ä–¥—ã –º–∞–º–ª–µ–∫–µ—Ç—Ç–∏–∫ —Ç–∏–∑–º–µ–¥–µ–Ω –¥–æ–ª–±–æ–æ—Ä–≥–æ –¥–∞–π—ã–Ω–¥–æ–æ",
        "Select Entity": "–°—É–±—ä–µ–∫—Ç–∏–Ω–∏ —Ç–∞–Ω–¥–∞“£—ã–∑",
        "Download Template": "–®–∞–±–ª–æ–Ω–¥—É –∂“Ø–∫—Ç”©”©",
        "Import Excel": "Excel –∏–º–ø–æ—Ä—Ç—Ç–æ–æ",
        "Upload Excel File": "Excel —Ñ–∞–π–ª—ã–Ω –∂“Ø–∫—Ç”©”©",
        "Assign to Project": "–î–æ–ª–±–æ–æ—Ä–≥–æ –¥–∞–π—ã–Ω–¥–æ–æ",
        "All rights reserved.": "–ë–∞—Ä–¥—ã–∫ —É–∫—É–∫—Ç–∞—Ä –∫–æ—Ä–≥–æ–ª–≥–æ–Ω.",
        "Make sure you upload an Excel file with the following columns:": "Excel —Ñ–∞–π–ª—ã–Ω —Ç”©–º”©–Ω–∫“Ø –∫–æ–ª–æ–Ω–∫–∞–ª–∞—Ä –º–µ–Ω–µ–Ω –∂“Ø–∫—Ç”©–≥”©–Ω“Ø“£“Ø–∑–≥”© —ã–Ω–∞–Ω—ã“£—ã–∑:",
        "| First Name | Last Name | Patronymic | ID Number | Region | Project Name |": "| –ê—Ç—ã | –§–∞–º–∏–ª–∏—è—Å—ã | –ê—Ç–∞—Å—ã–Ω—ã–Ω –∞—Ç—ã | –ñ–µ–∫–µ ID –Ω–æ–º–µ—Ä–∏ | –†–µ–≥–∏–æ–Ω | –î–æ–ª–±–æ–æ—Ä–¥—É–Ω –∞—Ç–∞–ª—ã—à—ã |",
        "The Project Name must be exactly the same as the project in Bitrix24.": "–î–æ–ª–±–æ–æ—Ä–¥—É–Ω –∞—Ç–∞–ª—ã—à—ã Bitrix24—Ç”©–≥“Ø –¥–æ–ª–±–æ–æ—Ä –º–µ–Ω–µ–Ω —Ç–∞–∫ –±–∏—Ä–¥–µ–π –±–æ–ª—É—à—É –∫–µ—Ä–µ–∫.",
        "Successfully imported {n} records.": "{n} –∂–∞–∑—É—É –∏–π–≥–∏–ª–∏–∫—Ç“Ø“Ø –∏–º–ø–æ—Ä—Ç—Ç–æ–ª–¥—É.",
        "Home": "–ë–∞—à–∫—ã –±–µ—Ç",
        "Welcome": "–ö–æ—à –∫–µ–ª–∏“£–∏–∑",
        "Choose an action below.": "–¢”©–º”©–Ω–¥”©–Ω –∞—Ä–∞–∫–µ—Ç—Ç–∏ —Ç–∞–Ω–¥–∞“£—ã–∑.",
        "Go to Scripts": "–°–∫—Ä–∏–ø—Ç—Ç–µ—Ä–≥–µ ”©—Ç“Ø“Ø",
        "Go to Excel Import": "Excel –∏–º–ø–æ—Ä—Ç–∫–æ ”©—Ç“Ø“Ø"
    },
    'ru': {
        "System Configuration": "–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
        "Run": "–ó–∞–ø—É—Å—Ç–∏—Ç—å",
        "Result": "–†–µ–∑—É–ª—å—Ç–∞—Ç",
        "Check for duplicated households": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤",
        "Check Eligibility": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è",
        "Remove Payment Duplicates": "–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–ª–∞—Ç–µ–∂–µ–π",
        "Check Duplicate IDs": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ ID",
        "Reset Beneficiaries": "–°–±—Ä–æ—Å–∏—Ç—å –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–æ–≤",
        "System Configuration": "–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
        "121 API URL": "121 API —Å—Å—ã–ª–∫–∞",
        "121 API Username": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 121 API",
        "121 API Password": "–ü–∞—Ä–æ–ª—å –æ—Ç 121 API",
        "Matching fields": "–ü–æ–ª—è –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è",
        "Beneficiary field": "–ü–æ–ª–µ –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–∞",
        "Project field": "–ü–æ–ª–µ –ø—Ä–æ–µ–∫—Ç–∞",
        "Duplicate enum values": "–ó–Ω–∞—á–µ–Ω–∏—è enum –¥–ª—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
        "Unique": "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π",
        "Duplicate": "–î—É–±–ª–∏–∫–∞—Ç",
        "Save Configuration": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
        "B24 Settings": "B24 Settings",
        'fetching_children': 'üë∂ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ—Ç–µ–π...',
        'found_beneficiaries_with_children': 'üë• –ù–∞–π–¥–µ–Ω–æ {count} –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–æ–≤ —Å –¥–µ—Ç—å–º–∏.',
        'detecting_duplicates': 'üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏ —Ä–µ–±–µ–Ω–∫–∞ –∏ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è...',
        'found_duplicates': '‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {count} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.',
        'fetching_beneficiaries': 'üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–æ–≤...',
        'duplicate_household': '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {name} ‚Üí —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å: {match_name}',
        "Starting payment deduplication...": "–ù–∞—á–∞—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –ø–ª–∞—Ç–µ–∂–µ–π...",
        "Deleted duplicate payment ID": "–£–¥–∞–ª—ë–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –ø–ª–∞—Ç—ë–∂ ID",
        "Failed to delete payment ID": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç—ë–∂ ID",
        "Done. Deleted {count} duplicates: {ids}": "–ì–æ—Ç–æ–≤–æ. –£–¥–∞–ª–µ–Ω–æ {count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {ids}",
        "Developed by 510 @ Netherlands Red Cross. Maintained by Kyrgyzstan Red Crescent": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ 510 –ø—Ä–∏ –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—Å–∫–æ–º –ö—Ä–∞—Å–Ω–æ–º –ö—Ä–µ—Å—Ç–µ. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ö—Ä–∞—Å–Ω—ã–º –ü–æ–ª—É–º–µ—Å—è—Ü–µ–º –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–∞.",
        "For any support, contact sh.abdiseitov@redcrescent.kg": "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å: sh.abdiseitov@redcrescent.kg",
        "Go to System Configuration": "–ü–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º —Å–∏—Å—Ç–µ–º—ã",
        "Run Scripts": "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∏–ø—Ç—ã",
        "Import from Excel": "–ò–º–ø–æ—Ä—Ç –∏–∑ Excel",
        "Step 1: Download Template": "–®–∞–≥ 1: –°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω",
        "Step 2: Import Excel File": "–®–∞–≥ 2: –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Excel —Ñ–∞–π–ª",
        "Step 3: Assign Beneficiaries to Project from Government List": "–®–∞–≥ 3: –ù–∞–∑–Ω–∞—á–∏—Ç—å –±–µ–Ω–µ—Ñ–∏—Ü–∏–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–µ–∫—Ç –∏–∑ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
        "Select Entity": "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–Ω–æ—Å—Ç—å",
        "Download Template": "–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω",
        "Import Excel": "–ò–º–ø–æ—Ä—Ç Excel",
        "Upload Excel File": "–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª",
        "Assign to Project": "–ù–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞ –ø—Ä–æ–µ–∫—Ç",
        "All rights reserved.": "–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.",
        "Make sure you upload an Excel file with the following columns:": "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ Excel-—Ñ–∞–π–ª —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏:",
        "| First Name | Last Name | Patronymic | ID Number | Region | Project Name |": "| –ò–º—è | –§–∞–º–∏–ª–∏—è | –û—Ç—á–µ—Å—Ç–≤–æ | –ù–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ | –†–µ–≥–∏–æ–Ω | –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ |",
        "The Project Name must be exactly the same as the project in Bitrix24.": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ –≤ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø—Ä–æ–µ–∫—Ç–æ–º –≤ Bitrix24.",
        "Successfully imported {n} records.": "–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {n} –∑–∞–ø–∏—Å–µ–π.",
        "Home": "–ì–ª–∞–≤–Ω–∞—è",
        "Welcome": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
        "Choose an action below.": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.",
        "Go to Scripts": "–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º",
        "Go to Excel Import": "–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–º–ø–æ—Ä—Ç—É –∏–∑ Excel"
        }
}

def translate(key, lang):
    return translations.get(lang, {}).get(key, key)

# Script configuration
SCRIPT_CONFIG = {
    "deduplicate": {
        "filename": "scripts/Child_deduplication.py",
        "label_key": "Check for duplicated households"
    },
    "check_eligibility": {
        "filename": "scripts/Eligibility_Check.py",
        "label_key": "Check Eligibility"
    },
    "remove_payment_duplicates": {
        "filename": "scripts/Deduplicate_Payments.py",
        "label_key": "Remove Payment Duplicates"
    },
    "check_duplicate_ids": {
        "filename": "scripts/Duplicate_Check.py",
        "label_key": "Check Duplicate IDs"
    },
    "reset_beneficiaries": {
        "filename": "scripts/resetting_beneficiaries.py",
        "label_key": "Reset Beneficiaries"
    }
}


@app.route("/", methods=["GET"])
def home():
    lang = request.args.get("lang", "en")

    # Your existing translate function
    t = lambda key: translate(key, lang)

    # Render the home page template
    return render_template("home.html", t=t, lang=lang)



@app.route('/system-config', methods=['GET', 'POST'])
def system_config():
    lang = request.args.get('lang', 'en')
    t = lambda key: translate(key, lang)

    config = load_config()

    if request.method == 'POST':
        updated_config = dict(config)

        # Update simple text/integer fields
        simple_fields = [
            "B24_WEBHOOK_URL",
            "PROJECT_ENTITY_TYPE_ID",
            "BENEFICIARY_ENTITY_TYPE_ID",
            "PAYMENT_ENTITY_TYPE_ID",
            "CHILD_ENTITY_TYPE_ID",
            "REGISTRATION_STAGE_ID",
            "VERIFIED_STAGE_ID",
            "ELIGIBLE_STAGE_ID",
            "COMPLETED_STAGE_ID",
            "STAGE_ID",
            "ELIGIBILITY_FIELD_ID",
            "PROGRAM_COUNT_FIELD_ID",
            "PROGRAM_NAMES_FIELD_ID",
            "DUPLICATE_CHECK_NATIONAL_ID_FIELD",
            "DUPLICATE_CHECK_NAME_FIELD",
            "DUPLICATE_FLAG_FIELD",
            "DUPLICATE_REASON_FIELD",
            "NATIONAL_ID_FIELD",
            "PROJECT_TYPE_FIELD",
            "CHILD_DOB_FIELD",
            "CHILD_AGE_FIELD",
            "CHILD_DEDUPLICATION_FIELD",
            "CHILD_DUPLICATE_NAME_FIELD",
            "PREVIOUS_PROJECTS_FIELD",
            "First Name"
        ]

        for field in simple_fields:
            if field in request.form:
                val = request.form.get(field)
                if isinstance(config.get(field), int):
                    try:
                        val = int(val)
                    except ValueError:
                        val = config.get(field)
                updated_config[field] = val

        # Handle MATCHING_FIELDS as a list of dictionaries (three-column structure)
        try:
            count = int(request.form.get('match_field_count', 0))
        except ValueError:
            count = 0

        matching_fields = []
        for i in range(count):
            opt = request.form.get(f'optional_name_{i}', '').strip()
            ben = request.form.get(f'beneficiary_field_{i}', '').strip()
            proj = request.form.get(f'project_field_{i}', '').strip()
            if ben and proj:
                matching_fields.append({
                    "optional_name": opt,
                    "beneficiary_field": ben,
                    "project_field": proj
                })
        updated_config["MATCHING_FIELDS"] = matching_fields
        import_fields = {}
        for key in request.form:
            if key.startswith("IMPORT_FIELDS[") and key.endswith("]"):
                display_name = key[len("IMPORT_FIELDS["):-1]
                internal_field = request.form.get(key)
                import_fields[display_name] = internal_field
        if import_fields:
            updated_config["IMPORT_FIELDS"] = import_fields        
        save_config(updated_config)
        return redirect(url_for('system_config', lang=lang, saved='true'))

    return render_template(
        'system_config.html',
        config=config,
        lang=lang,
        t=t,
        saved=request.args.get('saved', 'false')
    )




@app.route('/scripts', methods=['GET', 'POST'])
def scripts_page():
    lang = request.args.get('lang', 'en')
    result = None
    selected_script = None
    t = lambda key: translate(key, lang)

    if request.method == 'POST':
        selected_script = request.form.get('script')
        lang = request.form.get('lang', 'en')
        t = lambda key: translate(key, lang)

        if selected_script in SCRIPT_CONFIG:
            script_path = SCRIPT_CONFIG[selected_script]['filename']
            if os.path.exists(script_path):
                try:
                    result = subprocess.check_output(
                        ["python", script_path, lang],
                        stderr=subprocess.STDOUT,
                        text=True,
                        encoding='utf-8'
                    )
                except subprocess.CalledProcessError as e:
                    result = f"Error running script:\n{e.output}"
            else:
                result = f"Script not found at path: {script_path}"

    return render_template(
        'scripts.html',
        scripts=SCRIPT_CONFIG,
        lang=lang,
        t=t,
        result=result,
        selected_script=selected_script
    )

if __name__ == '__main__':
    app.run(debug=True)


@app.route('/import-excel', methods=['GET', 'POST'])
def import_excel():
    config = load_config()

    lang = request.args.get('lang', 'en')
    t = lambda key: translate(key, lang)

    if request.method == 'POST':
        lang = request.form.get('lang', lang)
        t = lambda key: translate(key, lang)

        entity = request.form.get('entity')
        file = request.files.get('file')

        if not entity or not file:
            flash(t("Entity or file not provided."), "error")
            return redirect(url_for('import_excel', lang=lang))

        entity_ids = {
            "beneficiaries": config["BENEFICIARY_ENTITY_TYPE_ID"],
            "projects": config["PROJECT_ENTITY_TYPE_ID"],
            "payments": config["PAYMENT_ENTITY_TYPE_ID"],
            "children": config["CHILD_ENTITY_TYPE_ID"]
        }

        entity_type_id = entity_ids.get(entity)
        if not entity_type_id:
            flash(t("Invalid entity selected."), "error")
            return redirect(url_for('import_excel', lang=lang))

        try:
            df = pd.read_excel(file)

            # Fetch field codes from Bitrix to map titles to field codes
            field_response = requests.get(
                f"{config['B24_WEBHOOK_URL']}/crm.item.fields",
                params={"entityTypeId": entity_type_id}
            )
            field_response.raise_for_status()
            field_data = field_response.json()["result"]["fields"]

            # Map Excel column headers to Bitrix field codes
            title_to_code = {
                field["title"]: code
                for code, field in field_data.items()
                if not field.get("isReadOnly", True) and field.get("title")
            }

            import math
            def clean_value(val):
                if pd.isna(val) or (isinstance(val, float) and not math.isfinite(val)):
                    return None
                if isinstance(val, str) and val.strip() == '':
                    return None
                return val

            results = []
            for _, row in df.iterrows():
                data_fields = {}

                for column in df.columns:
                    b24_code = title_to_code.get(column)
                    if b24_code:
                        value = clean_value(row.get(column))
                        if value is not None:
                            data_fields[b24_code] = value

                response = requests.post(
                    f"{config['B24_WEBHOOK_URL']}/crm.item.add.json",
                    json={
                        'entityTypeId': entity_type_id,
                        'fields': data_fields
                    }
                )
                results.append(response.json())

            flash(t("Successfully imported {n} records.").format(n=len(results)), "success")
        except Exception as e:
            flash(t(f"Error: {str(e)}"), "error")

    return render_template('import_excel.html', t=t, lang=lang)


@app.route('/download-template', methods=['GET'])
def download_template():
    import io
    from openpyxl import Workbook

    config = load_config()
    lang = request.args.get('lang', 'en')
    entity = request.args.get('entity')

    # Validate entity
    entity_map = {
        "beneficiaries": config.get("BENEFICIARY_ENTITY_TYPE_ID"),
        "projects": config.get("PROJECT_ENTITY_TYPE_ID"),
        "payments": config.get("PAYMENT_ENTITY_TYPE_ID"),
        "children": config.get("CHILD_ENTITY_TYPE_ID")
    }
    entity_id = entity_map.get(entity)
    if not entity_id:
        flash("Invalid entity selected", "error")
        return redirect(url_for('import_excel', lang=lang))

    # Fetch fields from Bitrix
    try:
        response = requests.get(
            f"{config['B24_WEBHOOK_URL']}/crm.item.fields",
            params={"entityTypeId": entity_id}
        )
        response.raise_for_status()
        fields = response.json().get("result", {}).get("fields", {})
    except Exception as e:
        flash(f"Failed to fetch fields: {str(e)}", "error")
        return redirect(url_for('import_excel', lang=lang))

    # Get import fields dictionary (label ‚Üí field ID)
    import_fields_dict = config.get("IMPORT_FIELDS", {})
    if not import_fields_dict:
        flash(f"No import fields specified for entity '{entity}'.", "error")
        return redirect(url_for('import_excel', lang=lang))

    # Build headers based on Bitrix field titles or fallback to config label
    headers = []
    for label, field_id in import_fields_dict.items():
        field_data = fields.get(field_id)
        title = field_data.get("title") if field_data else None
        headers.append(title or label or field_id)

    if not headers:
        flash("No valid fields found to include in template.", "error")
        return redirect(url_for('import_excel', lang=lang))

    # Create Excel file
    output = io.BytesIO()
    wb = Workbook()
    ws = wb.active
    ws.title = f"{entity.title()} Template"
    ws.append(headers)
    wb.save(output)
    output.seek(0)

    filename = f"{entity}_template.xlsx"
    return send_file(
        output,
        as_attachment=True,
        download_name=filename,
        mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

@app.route('/assign-to-project', methods=['POST'])
def assign_to_project():
    lang = request.form.get('lang', 'en')
    t = lambda key: translate(key, lang)

    file = request.files.get('govListFile')
    if not file or file.filename == '':
        flash("‚ùå No file selected", "danger")
        return redirect(url_for('import_excel', lang=lang))

    os.makedirs("uploads", exist_ok=True)
    path = os.path.join("uploads", secure_filename(file.filename))
    file.save(path)

    try:
        results = assign_beneficiaries_from_excel(path)

        # Handle dict output with "successes", "warnings", "errors"
        for msg in results.get("successes", []):
            flash(msg, "success")
        for msg in results.get("warnings", []):
            flash(msg, "warning")
        for msg in results.get("errors", []):
            flash(msg, "danger")

    except Exception as e:
        flash(f"‚ùå Error: {str(e)}", "danger")

    return redirect(url_for('import_excel', lang=lang))


@app.route('/generate-fsp-report', methods=['POST'])
def generate_fsp_report_route():
    from generate_fsp_report import generate_report  # we'll refactor script into a function

    lang = request.args.get('lang', 'en')
    project_name = request.form.get('project_name')

    if not project_name:
        flash("‚ùå No project name provided", "danger")
        return redirect(url_for('import_excel', lang=lang))

    try:
        # Call refactored function (see next step)
        output = io.BytesIO()
        generate_report(project_name, output)
        output.seek(0)

        filename = f"FSP_Report_{project_name}.xlsx"
        return send_file(
            output,
            as_attachment=True,
            download_name=filename,
            mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    except Exception as e:
        flash(f"‚ùå Error generating report: {str(e)}", "danger")
        return redirect(url_for('import_excel', lang=lang))
